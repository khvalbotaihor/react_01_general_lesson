{"version":3,"sources":["serviceWorker.ts","components/Acccordion/Accordion.tsx","components/Rating/Rating.tsx","components/OnOff/OnOff.tsx","components/UncontrolledAcccordion/UncontrolledAccordion.tsx","components/UncontrolledRating/UncontrolledRating.tsx","App.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","AccordionTitle","props","console","log","onClick","collapsed","title","AccordionBody","Accordion","titleValue","Rating","Star","selected","value","OnOff","useState","on","setOn","onStyle","width","height","border","display","padding","backgroundColor","offStyle","marginLeft","indicatorStyle","borderRadius","style","UncontrolledAccordion","SetCollapsed","UncontrolledRating","setValue","PageTitle","App","ratingValue","setRatingValue","accordionCollapsed","setAccordioncollapsed","className","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.48fd8acf.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\r\nimport {debuglog} from \"util\";\r\n\r\ntype AccordionPropsType = {\r\n    titleValue: string\r\n    collapsed: boolean\r\n    onClick:(value:boolean)=> void\r\n}\r\n\r\nfunction Accordion(props:AccordionPropsType) {\r\n    console.log(\"Accordion rendering\");\r\n        return (\r\n            <div>\r\n            <AccordionTitle title={props.titleValue} onClick={props.onClick} collapsed={props.collapsed}/>\r\n                {!props.collapsed &&  <AccordionBody/>}\r\n        </div>\r\n        )\r\n}\r\n\r\ntype AccordionTitlePropsType = {\r\n    title: string\r\n    onClick:(value:boolean)=> void\r\n    collapsed: boolean\r\n\r\n}\r\n\r\nfunction AccordionTitle(props:AccordionTitlePropsType) {\r\n    console.log(\"AccordionTitle rendering\");\r\n    return (\r\n        <h3 onClick={()=>{props.onClick(!props.collapsed)}}>{props.title}</h3>\r\n    )\r\n}\r\n\r\nfunction AccordionBody() {\r\n    console.log(\"AccordionBody rendering\");\r\n    return (\r\n            <ul>\r\n                <li>1</li>\r\n                <li>2</li>\r\n                <li>3</li>\r\n            </ul>\r\n    )\r\n}\r\n\r\nexport default Accordion;","import React from \"react\";\r\n\r\nexport type RatingValueType = 0|1|2|3|4|5 ;\r\n\r\ntype RatingPropsType = {\r\n    value: RatingValueType\r\n    onClick: (value:RatingValueType) => void\r\n}\r\n\r\nexport function Rating(props:RatingPropsType) {\r\n    console.log(\"UncontrolledRating rendering\");\r\n\r\n    return (\r\n        <div>\r\n            <Star selected={props.value>0} onClick={props.onClick} value={1}/>\r\n            <Star selected={props.value>1} onClick={props.onClick} value={2}/>\r\n            <Star selected={props.value>2} onClick={props.onClick} value={3}/>\r\n            <Star selected={props.value>3} onClick={props.onClick} value={4}/>\r\n            <Star selected={props.value>4} onClick={props.onClick} value={5}/>\r\n        </div>\r\n    )\r\n}\r\n\r\ntype StarPropsType = {\r\n    selected: boolean\r\n    value: RatingValueType\r\n    onClick: (value: RatingValueType) => void\r\n}\r\n\r\nfunction Star(props:StarPropsType) {\r\n    console.log(\"Start rendering\")\r\n    return <span onClick={()=>{\r\n        props.onClick(props.value)}}> {props.selected ? <b>star </b> : \"star \"}</span>\r\n}","import React, {useState} from \"react\";\r\n\r\ntype PropsType = {\r\n    //on: boolean\r\n}\r\n\r\nexport function OnOff(props:PropsType) {\r\n    console.log(\"UncontrolledOnOff rendering\")\r\n    let [on, setOn] = useState(false); // hook use state\r\n\r\n    console.log(\"on:\"+on);\r\n\r\n    const onStyle = {\r\n        width:\"30px\",\r\n        height:\"20px\",\r\n        border: \"1px solid black\",\r\n        display:\"inline-block\",\r\n        padding:\"2px\",\r\n        backgroundColor: on ? \"green\": \"white\"\r\n    };\r\n    const offStyle = {\r\n        width:\"30px\",\r\n        height:\"20px\",\r\n        border: \"1px solid black\",\r\n        display:\"inline-block\",\r\n        marginLeft:\"5px\",\r\n        padding:\"2px\",\r\n        backgroundColor: on ? \"white\": \"red\"\r\n\r\n    };\r\n    const indicatorStyle={\r\n        width:\"10px\",\r\n        height:\"10px\",\r\n        borderRadius:\"5px\",\r\n        border: \"1px solid black\",\r\n        display:\"inline-block\",\r\n        marginLeft:\"5px\",\r\n        backgroundColor: on ? \"green\": \"red\"\r\n\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            <div style={onStyle} onClick={()=>{setOn(true)}}>On</div>\r\n            <div style={offStyle} onClick={()=>{setOn(false)}}>Off</div>\r\n            <div style={indicatorStyle}></div>\r\n        </div>\r\n    )\r\n}","import React, {useState} from \"react\";\r\n\r\ntype AccordionPropsType = {\r\n    titleValue: string\r\n}\r\n\r\nexport function UncontrolledAccordion(props:AccordionPropsType) {\r\n\r\nlet [collapsed, SetCollapsed] = useState(true);\r\n\r\n    console.log(\"Accordion rendering\");\r\n        return (\r\n            <div>\r\n            <AccordionTitle title={props.titleValue} onClick={()=>{SetCollapsed(!collapsed) }}/>\r\n\r\n                {!collapsed &&  <AccordionBody/>}\r\n        </div>\r\n        )\r\n}\r\n\r\ntype AccordionTitlePropsType = {\r\n    title: string\r\n    onClick: ()=> void\r\n}\r\n\r\nfunction AccordionTitle(props:AccordionTitlePropsType) {\r\n    console.log(\"AccordionTitle rendering\");\r\n    return (\r\n        <h3 onClick={()=> {props.onClick()}}>{props.title}</h3>\r\n    )\r\n}\r\n\r\nfunction AccordionBody() {\r\n    console.log(\"AccordionBody rendering\");\r\n    return (\r\n            <ul>\r\n                <li>1</li>\r\n                <li>2</li>\r\n                <li>3</li>\r\n            </ul>\r\n    )\r\n}\r\n\r\n","import React, {useState} from \"react\";\r\n\r\nexport function UncontrolledRating() {\r\n    console.log(\"UncontrolledRating rendering\");\r\n\r\n    let [value, setValue] = useState(0);\r\n\r\n    return (\r\n        <div>\r\n            <Star selected={value>0} setValue={()=>{setValue(1)}}/>\r\n            <Star selected={value>1} setValue={()=>{setValue(2)}}/>\r\n            <Star selected={value>2} setValue={()=>{setValue(3)}}/>\r\n            <Star selected={value>3} setValue={()=>{setValue(4)}}/>\r\n            <Star selected={value>4} setValue={()=>{setValue(5)}}/>\r\n        </div>\r\n    )\r\n}\r\n\r\ntype StarPropsType = {\r\n    selected: boolean\r\n    setValue : ()=> void\r\n}\r\n\r\nfunction Star(props:StarPropsType) {\r\n    console.log(\"Start rendering\")\r\n\r\n    return <span onClick={()=>{props.setValue()} }>\r\n        { props.selected ?  <b>start </b> : \"start \" }\r\n    </span>\r\n}","import React, {useState} from 'react';\r\nimport './App.css';\r\nimport Accordion from \"./components/Acccordion/Accordion\";\r\nimport {Rating, RatingValueType} from \"./components/Rating/Rating\";\r\nimport {OnOff} from '../src/components/OnOff/OnOff'\r\nimport {UncontrolledAccordion} from \"./components/UncontrolledAcccordion/UncontrolledAccordion\";\r\nimport {UncontrolledRating} from \"./components/UncontrolledRating/UncontrolledRating\";\r\n\r\nfunction sum(a:number,b:number) {\r\n    alert(a+b)\r\n}\r\n\r\n/*sum(3,4);\r\nsum(100,333);*/\r\n\r\n// function declaration - ми будемо використовувати для обявления компонент\r\nfunction App(props:any) {\r\n    console.log(\"App rendering\")\r\n\r\n    // ми здесь должни делать штото полезное\r\n    //  и в конце функция обязана вернуть JSX\r\n    //бейбел траспілятор перетворює JSX в обичний JS код\r\n    let[ratingValue, setRatingValue] = useState<RatingValueType>(4);\r\n    let[accordionCollapsed, setAccordioncollapsed] = useState<boolean>(false);\r\n\r\n    return (\r\n        <div className={\"App\"}>\r\n            <PageTitle title={\"This is App component\"}/>\r\n            <PageTitle title={\"My friends\"}/>\r\n            Article 1\r\n{/*\r\n            <Rating value={3}/>\r\n*/}\r\n            <Accordion titleValue={\"Menu\"} collapsed={accordionCollapsed}\r\n                       onClick={setAccordioncollapsed}/>\r\n            <Accordion titleValue={\"Users\"} collapsed={accordionCollapsed}\r\n                       onClick={setAccordioncollapsed}/>\r\n\r\n            <UncontrolledAccordion titleValue={\"Menu\"}/>\r\n            <UncontrolledAccordion titleValue={\"Users\"}/>\r\n\r\n            Article 2\r\n            <Rating value={ratingValue}\r\n                    onClick={setRatingValue}/>\r\n{/*            <Rating value={ratingValue}/>\r\n            <Rating value={ratingValue}/>\r\n            <Rating value={ratingValue}/>\r\n            <Rating value={ratingValue}/>\r\n            <Rating value={ratingValue}/>*/}\r\n\r\n\r\n            <OnOff />\r\n\r\n            <OnOff />\r\n            <OnOff />\r\n            <OnOff />\r\n\r\n\r\n\r\n          <UncontrolledRating />\r\n          <UncontrolledRating />\r\n\r\n\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\ntype PageTitlePropsType = {\r\n    title: string\r\n}\r\n\r\nfunction PageTitle(props:PageTitlePropsType) {\r\n    console.log(\"PageTitle rendering\");\r\n\r\n    return (\r\n        <h1>{props.title}</h1>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport App from \"./App\";\n\nReactDOM.render(<App />,document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}